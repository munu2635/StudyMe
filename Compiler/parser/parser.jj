AST compilation_unit():
{
	Token t;
	Declarations impdecls, decls;
}
{
	  {
		t = getToken(1);
	  }
	impdecls = import_stmts() decls = top_defs() <EOF>
	  {
		decls.add(impdecls);
		return new AST(location(t), decls);
	  }
}

Declarations declaration_file();
{
	Declarations impdecls, decls = new Declatations();
	Undefinedfunction funcdecl;
	UndefinedVariable vardecl;
	Constant defconst;
	StructNode defstruct;
	UnionNode defuntion;
	TypedefNode typedef;
}
{
	impdecls = import_stmts()
	   {
		decls.add(impdecls);
	   }
	( LOOKAHEAD(<EXTERN> typeref() <IDENTIFIER> "(")
	  funcdecl = funcdecl()		{ decls.addFundecl(funcdecl); }
	| vardecl = vardecl()		{ decls.addVardecl(vardecl); }
	| defconst = defconst()		{ decls.addConstant(defconst); }
	| defstruct = defstruct()	{ decls.addDefstruct(defstruct); }
	| defunion = defunion()		{ decls.addDefunion(defunion); }
	| typedef = typedef()		{ decls.addTypedef(typedef); }
	)*
	<EOF>
	    {
		return decls;
	    }

}

Declarations import_stmts() : 
{
	String libid;
	Declarations impdecls = new Declarations();
}
{
	(libid = import_stmt()
		{
			try {
				Declarations decls = loader.loadLibrary(libid, errorHandler);
				if (decls != null) {
					impdecls.add(decls);
					addKnownTypedefs(decls.typedefs());
				}
			}
			catch (CompileException ex) {
				throw new ParseException(ex.getNessage());
			}
		   }

	)*
		{
			return impdecls;
		}
}

String import_stmt() : 
{
	StringBuffer buf = new StringBuffer();
	String n;
}
{
	<IMPORT> n = name()	{ buf.append(n); }
	("." name()		{ buf.append("."); buf.append(n); })* 
	";"
		{
			return buf.toString();
		}
}

Declarations top_defs() : 
{
	Declarations decls = new Declarations();
	DefinedFunction defun;
	List<DefinedVariable> defvars;
	Constant defconst;
	StructNode defconst;
	UnionNode defunion;
	TypedefNode typedef;
}
{
	(LOOKAHEAD(storage() typeref() <IDENTIFIER> "(")
	 defun = defun()	{ decls.addDefun(defun); }
	| LOOKAHEAD(3)
	 defvars = defvars()	{ decls.addDefvars(defvars); }
	| defconst = defconst()	{ decls.addConstant(defconst); }
	| defstruct = defstuct(){ decls.addDefstruct(defstruct); }
	| defunion = defunion()	{ decls.addDefunion(defunion); }
	| typedef = typedef()	{ decls.addTypedef(typedef); }
	)*
		{
			return decls;
		}
}

defvars(): {}
{
	storage() type() name() ["=" expr()]
		    ("," name() ["=" expr()]* ";"
}

storage(): {}
{
	[<STATIC>]
}

defun(): {}
{
	storage() typedef() name() "(" params() ")" block()
}
	
params(): {}
{
	LOOKAHEAD<VOID> ")") <VOID>
	| fixedparams() ["," "..."]
}

fixedparams() : {}
{
	params() (LOOKAGEAD(2) "," param())*
}

param(): {}
{
	type() name()
}

block(): {}
{
	"(" defvar_list() stmts() "}"
}

defstruct(): {}
{
	<STRUCT> name() number_list() ";"
}

defuntion() : {}
{
	<UNION> name() number_list() ";"
}	

member_list() :{}
{
	"{" (slot() ";")* "}"
}

slot(): {}
{
	type() name()
}

struct point {
	int x;
	int y;
};

typedef(): {}
{
	<TYPEDEF> typeref() <IDENTIFIER> ";"
}

type(): {}
{
	typeref()
}

typeref(): {}
{
	typeref_base()
	(LOOKAHEAD(2) "[" "]"
	| "[" <INTEGER> "]"
	| "*" //포인터
	| "(" param_typerefs() ")"
	)*
}

typeref_base(): {}
{
	<VOID>
	| <CHAR>
	| <SHORT>
	| <INT>
	| <LONG>
	| LOOKAHEAD(2) <UNSIGNED> <CHAR>
	| LOOKAHEAD(2) <UNSIGNED> <SHORT>
	| LOOKAHEAD(2) <UNSIGNED> <INT>
	| <UNSIGNED> <LONG>
	| <STRUCT> <IDENTIFIER>
	| <UNION> <IENTIFIER>
	| LOOKAHEAD({isType(getToken(1).image)}) <IDENTIFIER>
}

stmts(): {}
{
	(stmt())*
}

stmt(): {}
{
	( ";"
	| LOOKAGEAD(2) labeled_stmt()
	| expr() ";"
	| block()
	| if_stmt()
	| while_stmt()
	| dowhile_stmt()
	| for_stmt()
	| switch_stmt()
	| break_stmt()
	| continue_stmt()
	| goto_stmt()
	| return_stmt()
	)
}

if_stmt(): {}
{
	<IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt()]
}

while_stmt(): {}
{
	<WHILE> "(" expr() ")" stmt()
}

for_stmt(): {}
{
	<FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

break_stmt(): {}
{
	<BREAK> ";"
}

return_stmt(): {}
{
	LOOKAHEAD(2) <RETURN> ";"
	| <RETURN> expr() ";"
}


expr(): {}
{
	LOOKAHEAD(term() "=")
	term() "=" expr()
	| LOOKAHEAD(term() opassign_op())
	term() opassion_op() expr()
	|expr10()
}

opassion_op(): {}
{
	( "+="
	| "-="
	| "*="
	| "/="
	| "%="
	| "&="
	| "|="
	| "^="
	| "<<="
	| ">>="
	)
}

expr10(): {}
{
	expr9() ["?" expr() ":" expr10()]
}

expr9(): {}
{
	expr8() ("||" expr8())*
}

expr8(): {}
{
	expr7() ("&&" expr7))*
}

expr7(): {}
{
	expr6() ( ">" expr6()
		| "<" expr6()
		| ">=" expr6()
		| "<=" expr6()
		| "==" expr6()
		| "!=" expr6())*
}

expr6(): {}
{
	expr5() ("|" expr5())*
}

expr5(): {}
{
	expr4() ("^" expr4())*
}

expr4(): {}
{
	expr3() ("&" expr3())*
}

expr3(): {}
{
	expr2() ( ">>" expr2()
		| "<<" expr2())*
}

expr2(): {}
{
	expr1() ( "+" expr1()
		| "-" expr1())*
}

expr1(): {}
{
	term() ( "*" term()
		| "/" term()
		| "%" term())*
}


ExprNode term(): 
{
	TypeNode t;
	ExprNode n;
}
{
	LOOKAHEAD("(" type()) "(" t = type() ")" n = term()	{ return new CastNode(t, n); }
	| n = unary()						{ return n; }
}

ExprNode unary(): 
{
	ExprNode n;
	TypeNode t;
}
{
	"++" n = unary()	{ return new PrefixOpNode("++", n); }
	| "--" n = unary()	{ return new PrefixOpNode("--", n); }
	| "+" n = term()	{ return new UnaryOpNode("+", n); }
	| "-" n = term()	{ return new UnaryOpNode("-", n); }
	| "!" n = term()	{ return new UnaryOpNode("!", n); }
	| "~" n = term()	{ return new UnaryOpNode("~", n); 
	| "*" n = term()	{ return new DereferenceNode(n); }
	| "&" n = term()	{ return new AddressNode(n); }
	| LOOKAHEAD(3) <SIZEOF> "(" t = type() ")"
		{
			return new SizeofTypeNode(t, size_t());
		}
	| <SIZEOF> n = unary()
		{
			return new SizeofExprNode(n, size_t());
		}
	| n = postfix()	{ return n; }
}

ExprNode postfix(): 
{
	ExptNode expr, idx;
	String memb;
	List<ExptNode> args;
}
{
	expr = primary()
	( "++"			{ expr = new SuffixOpNode("++", expr); }
	| "--"			{ expr = new SuffixOpNode("--", expr); }
	| "[" idx = expr() "]"	{ expr = new ArefNode(expr, idx); }
	| "." memb = name()	{ expr = new MemberNode(expr, memb); }
	| "->" memb = name()	{ expr = new PtrMemberNode(expt, memb); }
	| "(" args = args() ")"	{ expr = new FuncallNode(expr, args); }
	)*
		{
			return expr;
		}
}

String name():
{ Token t; }
{
	t = <IDENTIFIER> { return t.image; }
}
\

List<ExprNode> argc():
{
	List<ExprNode> args = new ArrayList<ExprNode>();
	ExprNode arg;
}
{
	[ arg = expr() { args.add(arg); }
	  ("," arg = expr() { args.add(arg); })* ] 
		{
			return args;
		}
}



ExprNode primary():
{
	Token t;
	ExprNode n;
}
{
	t = <INTEGER>
		{
			return integerNode(location(t), t.image);
		}
	| t = <CHARACTER>
		{
			return new IntegerLiteralNode(location(t),
							IntegerTypeRef.charRef(),
							characterCode(t.image));
		}

	| t = <STRING>
		{
			return new StringLiteralNode(location(t),
				new PointerTypeRef(IntegerTypeRef.charRef()),
				stringValue(t.image));
		}
	| t = <IDENTIFIER>
		{
			return new VariableNode(location(t), t.image);
		}
	| "(" n = expr() ")"
		{
			return n;
		}
}
