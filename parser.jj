compilation_unit(): {}
{
	import_stmts() top_defs() <EOF>
}

import_stmts() : {}
{
	(import_stmt())*
}

import_stmt() : {}
{
	<IMPORT> name() ("." name())* ";"

}

name() : {}
{
	<IDENTIFIER>
}


top_defs() : {}
{
	(LOOKAHEAD(storage() typeref() <IDENTIFIER> "(")
	 defun()
	| LOOKAHEAD(3)
	 defvars()
	| defconst()
	| defstruct()
	| defunion()
	| typedef()
	)*
}

defvars(): {}
{
	storage() type() name() ["=" expr()]
		    ("," name() ["=" expr()]* ";"
}

storage(): {}
{
	[<STATIC>]
}

defun(): {}
{
	storage() typedef() name() "(" params() ")" block()
}
	
params(): {}
{
	LOOKAHEAD<VOID> ")") <VOID>
	| fixedparams() ["," "..."]
}

fixedparams() : {}
{
	params() (LOOKAGEAD(2) "," param())*
}

param(): {}
{
	type() name()
}

block(): {}
{
	"(" defvar_list() stmts() "}"
}

defstruct(): {}
{
	<STRUCT> name() number_list() ";"
}

defuntion() : {}
{
	<UNION> name() number_list() ";"
}	

member_list() :{}
{
	"{" (slot() ";")* "}"
}

slot(): {}
{
	type() name()
}

struct point {
	int x;
	int y;
};

typedef(): {}
{
	<TYPEDEF> typeref() <IDENTIFIER> ";"
}

type(): {}
{
	typeref()
}

typeref(): {}
{
	typeref_base()
	(LOOKAHEAD(2) "[" "]"
	| "[" <INTEGER> "]"
	| "*" //포인터
	| "(" param_typerefs() ")"
	)*
}

typeref_base(): {}
{
	<VOID>
	| <CHAR>
	| <SHORT>
	| <INT>
	| <LONG>
	| LOOKAHEAD(2) <UNSIGNED> <CHAR>
	| LOOKAHEAD(2) <UNSIGNED> <SHORT>
	| LOOKAHEAD(2) <UNSIGNED> <INT>
	| <UNSIGNED> <LONG>
	| <STRUCT> <IDENTIFIER>
	| <UNION> <IENTIFIER>
	| LOOKAHEAD({isType(getToken(1).image)}) <IDENTIFIER>
}

stmts(): {}
{
	(stmt())*
}

stmt(): {}
{
	( ";"
	| LOOKAGEAD(2) labeled_stmt()
	| expr() ";"
	| block()
	| if_stmt()
	| while_stmt()
	| dowhile_stmt()
	| for_stmt()
	| switch_stmt()
	| break_stmt()
	| continue_stmt()
	| goto_stmt()
	| return_stmt()
	)
}

if_stmt(): {}
{
	<IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt()]
}

while_stmt(): {}
{
	<WHILE> "(" expr() ")" stmt()
}

for_stmt(): {}
{
	<FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

break_stmt(): {}
{
	<BREAK> ";"
}

return_stmt(): {}
{
	LOOKAHEAD(2) <RETURN> ";"
	| <RETURN> expr() ";"
}


expr(): {}
{
	LOOKAHEAD(term() "=")
	term() "=" expr()
	| LOOKAHEAD(term() opassign_op())
	term() opassion_op() expr()
	|expr10()
}

opassion_op(): {}
{
	( "+="
	| "-="
	| "*="
	| "/="
	| "%="
	| "&="
	| "|="
	| "^="
	| "<<="
	| ">>="
	)
}

expr10(): {}
{
	expr9() ["?" expr() ":" expr10()]
}

expr9(): {}
{
	expr8() ("||" expr8())*
}

expr8(): {}
{
	expr7() ("&&" expr7))*
}

expr7(): {}
{
	expr6() ( ">" expr6()
		| "<" expr6()
		| ">=" expr6()
		| "<=" expr6()
		| "==" expr6()
		| "!=" expr6())*
}

expr6(): {}
{
	expr5() ("|" expr5())*
}

expr5(): {}
{
	expr4() ("^" expr4())*
}

expr4(): {}
{
	expr3() ("&" expr3())*
}

expr3(): {}
{
	expr2() ( ">>" expr2()
		| "<<" expr2())*
}

expr2(): {}
{
	expr1() ( "+" expr1()
		| "-" expr1())*
}

expr1(): {}
{
	term() ( "*" term()
		| "/" term()
		| "%" term())*
}


term(): {}
{
	LOOKAHEAD("(" type()) "(" type() ")" term()
	| unary()
}

unary(): {}
{
	"++" unary()
	| "--" unary()
	| "+" term()
	| "-" term()
	| "!" term()
	| "~" term()
	| " * " term()
	| "&" term()
	| LOOKAHEAD(3) <SIZEOF> "(" type() ")"
	| <SIZEOF> unary()
	| postfix()
}

postfix(): {}
{
	primary()
	( "++"
	| "--"
	| "[" expr() "]"
	| "."
		
}
